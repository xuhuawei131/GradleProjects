apply plugin: 'com.android.application'
android {
    compileSdkVersion 27
    buildToolsVersion '27.0.3'

    defaultConfig {
        applicationId "com.xuhuawei.gradledemo"
        minSdkVersion 15
        targetSdkVersion 22
        versionCode 1
        versionName "1.0"
    }
    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
        }
    }
    lintOptions {
        abortOnError false
    }

//    print(project.allprojects + "----------")
}

dependencies {
    compile fileTree(include: ['*.jar'], dir: 'libs')
    compile project(':buildstrlib')
    compile project(':pullalive')
    compile project(':Test')
}

//直接创建
task helloTask{
    println 'i am helloTask'
}


//通过TaskContainer去创建Task
this.tasks.create('helloTask2'){
    println 'i am helloTask2'
}

//查看TaskContainer中有哪些方法
//find、create


//无论哪种定义task的方式，在配置阶段，TaskContainer就会构成一个有向图，通过这个有向图 gradle就会知道这些整个task的类别和执行顺序


//对创建好的task 进行一些基本的配置，配置的方式基本两种：
// 1、定义的时候配置  推荐用这种
task helloTask3(group:'groupName',description:'task study'){//给task定义分组和描述信息
    println 'i am helloTask3'
}
//2、定义好的task中，调用配置方法，在配置的代码块中
task helloTask4{//给task定义分组和描述信息
    setGroup('groupName')
    setDescription('task study')
    println 'i am helloTask4'
}
//设置groupname，groupname相同的task会被放到一起，查看右侧gradle的列表结构
//如果不设置groupname，name这些task就会被放到other中
//所以建议我们新建的task 设置一个groupname，便于我们查找

//配置task不仅仅是设置groupname以及描述，这个仅仅影响存放的位置，而且其他的配置可以去源码查看



//task是我们gradle的执行阶段，不是配置阶段
task apkcopy{//闭包配置我们执行的逻辑
    doLast{//dolast会在我们执行阶段执行
        def sourcePath=this.getBuildDir().getPath()+'/outputs/apk/'
        def desationPath='/Users/lingdian/Downloads'//系统中的下载路径
        def command="mv -f ${sourcePath} ${desationPath}"

        //以后如果我们要执行其他的外部 命令，只要把command修改了就行了，其他的不用动
        exec{//exec 去执行我们的外部命令，接受一个闭包作为参数
            try{
                executable('bash')//定义我们的执行的类型,如果是外部命令，那就是我们的bash
                args '-c',command
                println 'the conmand is execute success'
            }catch(GradleException e){
                println 'thecommand id execute failed'
            }
        }
    }
}