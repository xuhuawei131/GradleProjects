apply plugin: 'com.android.application'
android {
    compileSdkVersion 27
    buildToolsVersion '27.0.3'

    defaultConfig {
        applicationId "com.xuhuawei.gradledemo"
        minSdkVersion 15
        targetSdkVersion 22
        versionCode 1
        versionName "1.0"
    }
    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
        }
    }
    lintOptions {
        abortOnError false
    }

//    print(project.allprojects + "----------")
}

dependencies {
    compile fileTree(include: ['*.jar'], dir: 'libs')
    compile project(':buildstrlib')
    compile project(':pullalive')
    compile project(':Test')
}

//内部创建doXXX
task helloTask(group:"xhw",description:"helloTaskDescription"){

    println 'i am helloTask'

    doFirst{
        println "the task group is:${group}"
    }
    //可以配置多个doXXX 他们的执行顺序是按照编写顺序
    doFirst{
        println "1 the task group is:${group}"
    }
    //可以配置多个doXXX 他们的执行顺序是按照编写顺序
    doFirst{
        println "2 the task group is:${group}"
    }
}

//外部创建doXXX
helloTask.doFirst {
    println "the task description is:${description}"
}
//外部创建doXXX
helloTask.doFirst {
    println "the task2 description is:${description}"
}



//通过TaskContainer去创建Task
this.tasks.create('helloTask2'){
    println 'i am helloTask2'
}

this.afterEvaluate {Project project->
    def startTime,endTime
    //build执行之前的task
    def preBuildTask=project.tasks.findByPath("preBuild")
    preBuildTask.doFirst {
        startTime=System.currentTimeMillis()
    }
    //在build这个task执行完之后可以算是结束了
    def buildTask=project.tasks.findByPath("build")
    buildTask.doLast {
        endTime=System.currentTimeMillis()
        println "the build time is:${endTime-startTime}"
    }

}